//prints output to the console and counts the number of times the program has been called for a given account, storing the number on-chain. Letâ€™s break down the code into separate sections.

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
};

/// Define the type of state stored in accounts
#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct GreetingAccount {
    /// number of Stakers
    pub counter: u32,
}

// Declare and export the program's entrypoint
entrypoint!(process_instruction);



pub fn process_instruction(
    program_id: &Pubkey, \\ Public key of stakers
    accounts: &[AccountInfo], // The account to register as staker
    _instruction_data: &[u8], 

    ) -> ProgramResult {
    msg!("Begun Staking");

    // Iterating accounts is safer then indexing
    let accounts_iter = &mut accounts.iter();

    // Get the account to say hello to
    let account = next_account_info(accounts_iter)?;

    // The account must be owned by the program in order to modify its data
    if account.owner != program_id {
        msg!("Account does not have the correct program id");
        return Err(ProgramError::IncorrectProgramId);
    }

    // Increment and store the number of times the account has been greeted
    let mut greeting_account = GreetingAccount::try_from_slice(&account.data.borrow())?;
    greeting_account.counter += 1;
    greeting_account.serialize(&mut &mut account.data.borrow_mut()[..])?;

    msg!("Number of {} stakers!", greeting_account.counter);

    Ok(())
